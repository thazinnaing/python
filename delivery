from pymongo import MongoClient


class delivery:
    try:
        connection = MongoClient("localhost", 27017)
        database = connection["DeliveryDB"]
        collection = database["foodcollection"]
        collection1 = database["usercollection"]

        # collection.drop()
    except Exception as error:
        print(error)

    def __init__(self):

        fooddata = [{"_id": 1, "shop name": "Teapro",
                     "food": {"burger": 2000, "sandwich": 2000, "tea salad": 2500},
                     "drink": {"tea": 1000, "coffee": 1000, "cappuccino": 4500}},
                    {"_id": 2, "shop name": "Pann",
                     "food": {"burger": 3000, "chicken pizza": 18000, "sandwich": 2000, "potato marlar": 3500, },
                     "drink": {"lemontea": 1000, "coffee": 1000, "cappuccino": 3000}},
                    {"_id": 3, "shop name": "View",
                     "food": {"rice salad": 3000, "fried noodles": 3500, "fried chicken": 4000, "expresso": 5000,
                              "sandwich": 3500},
                     "drink": {"tea": 800, "coffee": 1000, "cappuccino": 4500}},
                    {"_id": 4, "shop name": "Cafe99",
                     "food": {"burger": 3000, "bread": 1000, "chicken pizza": 13000, "silon tea": 2000,
                              "lemon tea": 1000, "orange juice": 1500, "fried noodles": 3000},
                     "drink": {"coffee": 1000, "cappuccino": 3500, "black_coffee": 2000}},
                    {"_id": 5, "shop name": "Fudo",
                     "food": {"burger": 3000, "chocolate cake": 28000, "layer cake": 3000, "sandwich": 3000,
                              "hotdog burger": 4500, "cheese pizza": 15000, "hamburger": 3500},
                     "drink": {"strawberry juice": 3500, "coffee": 1000, "cappuccino": 4500, "lemon juice": 4500,
                               "watermelon juice": 3000}}
                    ]
        userdata = {"_id": 1, "username": "Thazin Naing", "password": "thazin123", "phone number": "95977482032"}

        # self.collection.insert_many(fooddata)
        # self.collection1.insert_one(userdata)


    def showMenu(self):
        list1 = []
        food = self.collection.find().distinct("food")
        for item in food:
            for i in item:
                list1.append(i)
        st = '\n'.join(map(str, list1))
        list2 = []
        drink = self.collection.find().distinct("drink")
        for item in drink:
            for i in item:
                list2.append(i)
        st2 = '\n'.join(map(str, list2))

        f = ">>>>> Food <<<<<\n"
        d = "\n>>>>> Drink <<<<<\n"
        stringadd = f + st + d + st2
        return stringadd

    def create_account(self):
        user = "Enter user name$Enter phone number$Enter password$Enter confirm password"
        return user

    def confirmpassword(self, recvdata):
        list_l = recvdata.split("$")
        if list_l[2] == list_l[3]:
            return 1
        else:
            return 2

    def sign_in(self):
        sign = "Enter phone number:*Enter password"
        return sign

    def checking_phone(self, phone):
        global phoneno
        phonedata = self.collection1.find().distinct("phone number")
        for d in phonedata:
            if phone == d:
                phoneno = 1
                break
            else:
                phoneno = 0

        return phoneno

    def checking_password(self, phone, password):
        query = {"phone number": phone}
        phonedata = self.collection1.find_one(query)
        passw = phonedata.get("password")
        if passw == password:
            return 't'
        else:
            return 'f'

    def store_account(self, stringdata):

        collect = self.connection['DeliveryDB']["usercollection"]
        print(collect)
        count = collect.count_documents({}) + 1
        list_1 = stringdata.split("$")
        list_1.insert(0, count)
        list_1.insert(4, [])

        list_2 = ['_id', 'username', 'phone number', 'password']
        list_3 = zip(list_2, list_1)
        list_4 = (dict(list_3))
        self.collection1.insert_one(list_4)

    def stringcheck(self, phone):
        try:
            intphone = int(phone)
            return 't'

        except Exception as error:
            return 'f'

    def create_phone(self, phone):

        intphone = int(phone)

        if intphone > 9590000000 and intphone < 959999999999:

            return 't'
        else:
            return 'f'

    def phoneinmongo(self, phone):
        global findcount
        mongodata = self.collection1.find().distinct("phone number")
        for d in mongodata:
            if phone == d:
                findcount = 1
                break
            else:
                findcount = 0
        return findcount

    def order(self):
        orderdata = "\n>>>>>>You can order now<<<<<<\n"
        return orderdata

    def splitdata(self, sign, recvFromServer):
        splitdata = recvFromServer.split(sign)
        list_l = []
        for data in splitdata:
            d = input(data)
            list_l.append(d)
        data = sign.join(map(str, list_l))
        return data

    def checkshopname(self, item, shopname, fd):
        food = self.collection.find().distinct(fd)
        print(food)
        for title in food:
            for ite in title:
                if ite == item:
                    fooddata = self.collection.find_one({fd: title})
                    shop = fooddata.get("shop name")
                    print(shop)
                    if shop == shopname:
                        return 't'
                    else:
                        pass

        return 'f'

    def checkmenu(self, checkme, fooddrink):
        fooddata = self.collection.find().distinct(fooddrink)
        list_l = []
        count = 0
        for i in fooddata:

            for j in i:
                if j == checkme:
                    data = self.collection.find_one({fooddrink: i})
                    shop = data.get("shop name")
                    price = i.get(j)
                    p = str(price)
                    d = "-"
                    f = ":"
                    strl = shop + d + checkme + f + p
                    list_l.append(strl)
                    count = count + 1
        if count > 0:
            rdata = '\n'.join((map(str, list_l)))
            r = "\nEnter shop name"
            s = rdata + r
            return s
        else:
            return 'f'

    def option(self):
        print("Press 1 to show menu\nPress 2 to create account\nPress 3 to sign in\nPress 4 to exit")
        option = input("Enter option")
        return option


obj = delivery()

# db.collection.update({"name":"vahid"},{$push:{ "visited": {id:2,'date':'324324',noskhe:['d','n']}}})
