from pymongo import MongoClient
import time


class delivery:
    try:
        connection = MongoClient("localhost", 27017)
        database = connection["DeliveryDB"]
        collection = database["foodcollection"]
        collection1 = database["usercollection"]
        collection2 = database["un_signin_user"]
        collection3 = database["delivery_collection"]
        collection4 = database["admin"]


        # collection.drop()
    except Exception as error:
        print(error)

    def __init__(self):

        fooddata = [{"_id": 1, "shop name": "Teapro",
                     "food": {"burger": 2000, "sandwich": 2000, "tea salad": 2500},
                     "drink": {"tea": 1000, "coffee": 1000, "cappuccino": 4500}},
                    {"_id": 2, "shop name": "Pann",
                     "food": {"burger": 3000, "chicken pizza": 18000, "sandwich": 2000, "potato marlar": 3500, },
                     "drink": {"lemontea": 1000, "coffee": 1000, "cappuccino": 3000}},
                    {"_id": 3, "shop name": "View",
                     "food": {"rice salad": 3000, "fried noodles": 3500, "fried chicken": 4000, "expresso": 5000,
                              "sandwich": 3500},
                     "drink": {"tea": 800, "coffee": 1000, "cappuccino": 4500}},
                    {"_id": 4, "shop name": "Cafe99",
                     "food": {"burger": 3000, "bread": 1000, "chicken pizza": 13000, "silon tea": 2000,
                              "lemon tea": 1000, "orange juice": 1500, "fried noodles": 3000},
                     "drink": {"coffee": 1000, "cappuccino": 3500, "black_coffee": 2000}},
                    {"_id": 5, "shop name": "Fudo",
                     "food": {"burger": 3000, "chocolate cake": 28000, "layer cake": 3000, "sandwich": 3000,
                              "hotdog burger": 4500, "cheese pizza": 15000, "hamburger": 3500},
                     "drink": {"strawberry juice": 3500, "coffee": 1000, "cappuccino": 4500, "lemon juice": 4500,
                               "watermelon juice": 3000}}
                    ]
        userdata = {"_id": 1, "username": "Thazin Naing", "password": "thazin123", "phone number": "95977482032"}

        deli_data = [{"_id": 1, "username": "Aung Kaung Satt", "NRC no": "9/Pa Oo La(C)083451", "phone number": "959666777777", "Access Location": ["Pyin Oo Lwin", "Anisakhan"]},
                     {"_id": 2, "username": "Si Thu", "NRC no": "9/Pa Oo La(C)083452", "phone number": "959666666666", "Access Location": ["Mandalay", "Pyin Sar"]},
                     {"_id": 3, "username": "Su Htet", "NRC no": "9/Pa Oo La(C)083453", "phone number": "959777777777", "Access Location": ["Yangon", "Hlae Dan"]},
                     {"_id": 4, "username": "Khant Ko", "NRC no": "9/Pa Oo La(C)083454", "phone number": "959888888888", "Access Location": ["Banmaw", "Myit Kyee Nar"]},
                     {"_id": 5, "username": "Nay Thway", "NRC no": "9/Pa Oo La(C)083455", "phone number": "9596111111111", "Access Location": ["Sagaing", "Magway"]}]

        admin = {"_id": 1, "user name": "Admin", "password": "root", "phone number": "959100000000"}

        # self.collection2.insert_one(userdata)

        # self.collection.insert_many(fooddata)
        # self.collection1.insert_one(userdata)
        # self.collection3.insert_many(deli_data)
        # self.collection4.insert_one(admin)


    def showMenu(self):
        list1 = []
        food = self.collection.find().distinct("food")
        for item in food:
            for i in item:
                list1.append(i)
        st = '\n'.join(map(str, list1))
        list2 = []
        drink = self.collection.find().distinct("drink")
        for item in drink:
            for i in item:
                list2.append(i)
        st2 = '\n'.join(map(str, list2))

        f = ">>>>> Food <<<<<\n"
        d = "\n>>>>> Drink <<<<<\n"
        stringadd = f + st + d + st2
        return stringadd

    def create_account(self):
        user = "Enter user name$Enter phone number$Enter password$Enter confirm password"
        return user

    def confirmpassword(self, recvdata):
        list_l = recvdata.split("$")
        if list_l[2] == list_l[3]:
            return 1
        else:
            return 2

    def sign_in(self):
        sign = "Enter phone number:*Enter password"
        return sign

    def check_admin_phone(self, phone):
        phonedata = self.collection4.find().distinct("phone number")
        for d in phonedata:
            if phone == d:
                return 't'
            else:
                pass

        return 'f'

    def check_admin_password(self, phone, password):
        query = {"phone number": phone}
        phonedata = self.collection4.find_one(query)
        passw = phonedata.get("password")
        if passw == password:
            return 't'
        else:
            return 'f'

    def checking_phone(self, phone):

        phonedata = self.collection1.find().distinct("phone number")
        for d in phonedata:
            if phone == d:
                return 1
            else:
                pass

        return 0

    def checking_password(self, phone, password):
        query = {"phone number": phone}
        phonedata = self.collection1.find_one(query)
        passw = phonedata.get("password")
        if passw == password:
            return 't'
        else:
            return 'f'

    def store_account(self, stringdata):

        collect = self.connection['DeliveryDB']["usercollection"]

        count = collect.count_documents({}) + 1
        list_1 = stringdata.split("$")
        list_1.insert(0, count)


        list_2 = ['_id', 'username', 'phone number', 'password']
        list_3 = zip(list_2, list_1)
        list_4 = (dict(list_3))
        self.collection1.insert_one(list_4)

    def stringcheck(self, phone):
        try:
            intphone = int(phone)
            return 't'

        except Exception as error:
            return 'f'

    def create_phone(self, phone):

        intphone = int(phone)

        if intphone > 9590000000 and intphone < 959999999999:

            return 't'
        else:
            return 'f'

    def phoneinmongo(self, phone):
        global findcount
        mongodata = self.collection1.find().distinct("phone number")
        for d in mongodata:
            if phone == d:
                findcount = 1
                break
            else:
                findcount = 0
        return findcount

    def order(self):
        orderdata = "\n>>>>>>You can order now<<<<<<\n"
        return orderdata

    def splitdata(self, sign, recvFromServer):
        splitdata = recvFromServer.split(sign)
        list_l = []
        for data in splitdata:
            d = input(data)
            list_l.append(d)
        data = sign.join(map(str, list_l))
        return data

    def checkshopname(self, item, shopname, fd):
        food = self.collection.find().distinct(fd)

        for title in food:
            for ite in title:
                foodie = ite.upper()
                item_data = item.upper()

                if foodie == item_data:
                    fooddata = self.collection.find_one({fd: title})
                    shop = fooddata.get("shop name")

                    shopie = shop.upper()
                    shop_data = shopname.upper()

                    if shopie == shop_data:
                        return 't'
                    else:
                        pass

        return 'f'

    def checkmenu(self, checkme, fooddrink):
        fooddata = self.collection.find().distinct(fooddrink)
        list_l = []
        count = 0
        for i in fooddata:

            for j in i:
                item = j.lower()
                food = checkme.lower()
                if item == food:
                    data = self.collection.find_one({fooddrink: i})
                    shop = data.get("shop name")
                    price = i.get(j)
                    p = str(price)
                    d = "-"
                    f = ":"
                    strl = shop + d + food + f + p
                    list_l.append(strl)
                    count = count + 1
        if count > 0:
            rdata = '\n'.join((map(str, list_l)))
            r = "\nEnter shop name"
            s = rdata + r
            return s
        else:
            return 'f'

    def option(self):
        print("Press 1 to show menu\nPress 2 to create account\nPress 3 to sign in\nPress 4 to exit")
        option = input("Enter option")
        return option

    def addhistory(self, phone, item_fee, deli_amount, list_l, location):

        deli_fee = str(deli_amount)
        total_amount = item_fee + deli_amount
        total_fee = str(total_amount)

        l1 = []
        for item in list_l:

            shopname = item.get("shop name")
            itemname = item.get("item")
            price = item.get("price")
            noofitem = item.get("numberofitem")
            addst = shopname + "-" + itemname + "-" + str(price) + "-" + str(noofitem)
            l1.append(addst)

        itemlist = '\n'.join((map(str, l1)))

        local_time = self.timestr()
        history = "Phone no     -> " + phone + "\n" + ">>item<<" + "\n" + itemlist + "\n" + "Item fee    -> " + str(item_fee) + "\n" + "Delivery fee -> " + deli_fee + "\n" + "Total amount -> " + total_fee + "\n" + "Location     -> " + location + "\n" + "Local time   -> " + local_time
        return history

    # + "\n" + "Location     -> " + location

    def split_history(self, history):
        split_data = history.split("\n")
        split_price = split_data[-2].split("-> ")
        fee = int(split_price[1])


    def timestr(self):

        named_tuple = time.localtime()
        time_string = time.strftime("%m-%d-%Y, %b-%I:%M:%S-%p", named_tuple)

        return time_string
    def poplist(self):
        global list_l
        list_l = []
        list_l = [{'shop name': 'Teapro', 'item': 'burger', 'price': 2000, 'numberofitem': 4},
                  {'shop name': 'Pann', 'item': 'sandwich', 'price': 2000, 'numberofitem': 2}]


        for i in range(len(list_l)):
            list_l.pop()


    def sign_inaddhistory(self, phone, insertstring):

        for data in range(len(phone)):

            var = phone[data]

            query = {"phone number": var}

            phoneinmongo = self.collection1.find_one(query)
            id = phoneinmongo.get("_id")
            self.collection1.update_one({"_id": id}, {"$push": {"order history": insertstring}})
            print("insert history success")

    def check_phoneindb(self, phone):
        list1 = []
        ph = self.collection1.find().distinct("phone number")

        for data in ph:
            if data == phone:
                list1.append(data)
                return list1
            else:
                pass
        return "f"

    def un_singin(self, phone, history):
        list1 = []
        collect = self.connection['DeliveryDB']["un_signin_user"]
        count = collect.count_documents({}) + 1
        list1.append(phone)


        list1.insert(0, count)
        list1.insert(2, [])

        list_2 = ['_id', 'phone number']
        list_3 = zip(list_2, list1)
        list_4 = (dict(list_3))
        self.collection2.insert_one(list_4)
        print("\ninsert success")

        query = {"phone number": phone}
        self.collection2.find_one(query)
        self.collection2.update_one({"phone number": phone}, {"$push": {"order history": history}})
        print("\nhistory success")

    def phone_checkindb(self, phone):
        data = self.collection2.find().distinct("phone number")
        for item in data:

            if item == phone:
                return "t"

            else:
                pass
        return "f"

    def add_un_sign_history(self, phone, history):
        phonedata = self.collection2.find().distinct("phone number")
        print(phonedata)
        for item in phonedata:
            if item == phone:
                self.collection2.update_one({"phone number": phone}, {"$push": {"order history": history}})
            else:
                pass
        print('update success')

    def location(self):
        lo = "Press 1 :: Mandalay\nPress 2 :: Yangon\nPress 3 :: Hlae Dan\n" \
             "Press 4 :: Banmaw\nPress 5 :: Anisakhan\nPress 6 :: Myit Kyee Nar\nPress 7 :: Pyin Sar\n" \
             "Press 8 :: Magway\nPress 9 ::Sagaing\nPress 10 :: Pyin Oo Lwin"
        return lo

    def choose_location(self, location):
        loc = int(location)
        list = ["Mandalay", "Yangon", "Hlae Dan", "Banmaw", "Anisakhan", "Myit Kyee Nar", "Pyin Sar", "Magway", "Sagaing", "Pyin Oo Lwin"]

        for item in range(len(list)):
            if item+1 == loc:
                name = list[item]

                return name

    def chosse_deli(self, loc_no):
        if loc_no == "10" or loc_no == "5":
            return 1
        elif loc_no == "1" or loc_no == "7":
            return 2
        elif loc_no == "2" or loc_no == "3":
            return 3
        elif loc_no == "4" or loc_no == "6":
            return 4
        elif loc_no == "9" or loc_no == "8":
            return 5

    def add_deli_history(self, deli_index, history):

        deli_data = self.collection3.find().distinct("_id")
        for item in deli_data:
            if item == deli_index:
                self.collection3.update_one({"_id": deli_index}, {"$push": {"order history": history}})
                break
        print("update deli history success")


obj = delivery()




